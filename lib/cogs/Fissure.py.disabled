import asyncio

import discord
from discord import app_commands
from discord.app_commands import Choice
from discord.ext import commands, tasks
from discord.ext.commands import Cog
from pymysql import IntegrityError

import fissure_engine
from fissure_engine.FissureEngine import FissureEngine


class FissureView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.last_update_time = None


class Fissure(Cog):
    def __init__(self, bot):
        self.bot = bot
        self.fissure_engine = FissureEngine()
        self.update_fissure_list.start()
        self.image_dict = {
            'Lith': 'https://cdn.discordapp.com/emojis/780453137588551720.webp',
            'Meso': 'https://cdn.discordapp.com/emojis/780453137739022357.webp',
            'Neo': 'https://cdn.discordapp.com/emojis/780453137675714630.webp',
            'Axi': 'https://cdn.discordapp.com/emojis/780453137291018271.webp',
            'Requiem': 'https://cdn.discordapp.com/emojis/1043330972642447500.webp'
        }
        self.color_dict = {
            'Lith': discord.Color.green(),
            'Meso': discord.Color.blue(),
            'Neo': discord.Color.red(),
            'Axi': discord.Color.gold(),
            'Requiem': discord.Color.purple()
        }

    @tasks.loop(seconds=5)
    async def update_fissure_list(self):
        new_fissures = await self.fissure_engine.build_fissure_list()
        if new_fissures:
            self.bot.loop.create_task(self.send_new_fissures(new_fissures))

    async def send_new_fissures(self, new_fissures):
        fissure_log_dict = self.bot.database.get_fissure_log_channels()

        # Create a dictionary of embeds with fissure type as the key
        embeds_dict = {}
        for fissure in new_fissures:
            embeds_dict.setdefault(fissure.fissure_type, []).append(self.get_fissure_info_embed(fissure))

        fissure_tasks = []
        for fissure_type, fissure_servers in fissure_log_dict.items():
            # Get the embeds of the current fissure type
            embeds = embeds_dict.get(fissure_type, [])

            for server_id, channel_ids in fissure_servers.items():
                server = self.bot.get_guild(server_id)
                if server is None:
                    continue

                channels = list(filter(None, map(server.get_channel, channel_ids)))
                fissure_tasks.extend([channel.send(embed=embed) for channel in channels for embed in embeds])

        await asyncio.gather(*fissure_tasks)

    def get_fissure_info_embed(self, fissure: fissure_engine.FissureEngine.Fissure):
        embed = discord.Embed(colour=self.color_dict[fissure.era])

        embed.set_author(name=f'New {fissure.era} Fissure ({fissure.fissure_type})',
                         icon_url=self.image_dict[fissure.era])

        embed.description = f"Ends {self.fissure_engine.format_time_remaining(fissure.expiry, FissureEngine.DISPLAY_TYPE_DISCORD)}"

        embed.add_field(name='Mission', value=f'{fissure.mission} - {fissure.node} ({fissure.planet})', inline=True)
        embed.add_field(name='Enemy', value=fissure.enemy, inline=True)
        embed.add_field(name='Tileset', value=fissure.tileset, inline=True)

        return embed

    async def get_fissure_list_embed(self, fissure_type: str = 'Normal',
                                     display_type: str = FissureEngine.DISPLAY_TYPE_DISCORD,
                                     era_list: list = None):
        if era_list is None:
            era_list = self.fissure_engine.get_era_list(fissure_type)

        fissures = self.fissure_engine.get_fissures(fissure_type=fissure_type,
                                                    era=era_list)

        era_resets = self.fissure_engine.get_resets(fissure_type=fissure_type,
                                                    display_type=display_type,
                                                    emoji_dict=self.bot.emoji_dict,
                                                    era_list=era_list)

        embed = discord.Embed(title=f'Fissures ({fissure_type})', colour=discord.Colour.dark_gold())

        fields = [('Era', '{era}'),
                  ('Mission', '{mission} - {node} ({planet})'),
                  ('Ends', '{expiry}')]

        for field, value in self.fissure_engine.get_fields(fissures, fields, display_type,
                                                           self.bot.emoji_dict).items():
            embed.add_field(name=field, value='\n'.join(value), inline=True)

        embed.add_field(name='\u200b', value='\n'.join(era_resets), inline=False)

        return embed

    @commands.hybrid_command(name='fissures', aliases=['fissure', 'fiss', 'f'])
    async def fissures(self, ctx, fissure_type: str = 'Normal'):
        """Get the current list of fissures."""
        if fissure_type.lower() not in self.fissure_engine.ALIASES:
            await self.bot.send_message(ctx, f'Invalid fissure type: {fissure_type}')
            return

        fissure_type = self.fissure_engine.ALIASES[fissure_type.lower()]

        embed = await self.get_fissure_list_embed(fissure_type,
                                                  era_list=[FissureEngine.ERA_LITH, FissureEngine.ERA_MESO,
                                                            FissureEngine.ERA_NEO, FissureEngine.ERA_AXI])
        await self.bot.send_message(ctx, embed=embed)

    @commands.hybrid_command(name='fissure_log_channel', aliases=['flc', 'flogc', 'flogchannel', 'fissurelogchannel'],
                             brief='Set the channel for the fissure log.')
    @commands.has_permissions(manage_channels=True)
    @app_commands.describe(fissure_type='The type of fissure to log.',
                           channel='The channel to log the fissures in.')
    @app_commands.choices(fissure_type=[Choice(name='Normal', value='normal'),
                                        Choice(name='Steel Path', value='sp'),
                                        Choice(name='Void Storm', value='vs')])
    async def fissure_log_channel(self, ctx,
                                  fissure_type: str = commands.parameter(
                                      default='normal',
                                      description="The type of fissure to log."),
                                  channel: discord.TextChannel = commands.parameter(
                                      default=lambda ctx: ctx.channel,
                                      displayed_default='current channel',
                                      description="The channel to log the fissures in.")):
        """
        If no channel is provided, the current channel is used.

        If you wish to set a log channel and are not using the slash command,
        ensure that you also provide a fissure type before the channel.

        You must have the `manage_channels` permission to use this command.

        By default, only normal fissures are logged. To log other fissure types, provide the fissure type as the
        first argument. Valid types are `normal`, `sp`, and `vs`.

        You can log multiple fissure types in the same channel by repeating the command with different types.
        """
        if channel is None:
            channel = ctx.channel

        if fissure_type.lower() not in self.fissure_engine.ALIASES:
            await self.bot.send_message(ctx, f'Invalid fissure type: {fissure_type}')
            return

        fissure_type = self.fissure_engine.ALIASES[fissure_type.lower()]

        try:
            self.bot.database.set_fissure_log_channel(channel.guild.id, channel.id, fissure_type)
        except IntegrityError:
            self.bot.database.unset_fissure_log_channel(channel.guild.id, channel.id, fissure_type)
            await self.bot.send_message(ctx,
                                        f'You will no longer receive {fissure_type} fissure logs in {channel.mention}')
            return

        await self.bot.send_message(ctx, f'New {fissure_type} fissures will now be logged in {channel.mention}')

    @commands.hybrid_command(name='fissure_list_channel', aliases=['fissure_list', 'flist', 'flistchannel'],
                             brief='Set the channel for the fissure log.')
    @commands.has_permissions(manage_channels=True)
    @app_commands.describe(fissure_type='The type of fissure to log.',
                           channel='The channel to post the fissure list in.')
    @app_commands.choices(fissure_type=[Choice(name='Normal', value='normal'),
                                        Choice(name='Steel Path', value='sp'),
                                        Choice(name='Void Storm', value='vs')])
    async def fissure_list_channel(self, ctx,
                                   fissure_type: str = commands.parameter(
                                       default='normal',
                                       description="The type of fissures to list."),
                                   channel: discord.TextChannel = commands.parameter(
                                       default=lambda ctx: ctx.channel,
                                       displayed_default='current channel',
                                       description="The channel to list the fissures in."),
                                   max_tier: int = commands.parameter(
                                       default=3,
                                       description="The maximum tier of fissures to list."),
                                   ):
        """
        If no channel is provided, the current channel is used.

        If you wish to set a channel and are not using the slash command,
        ensure that you also provide a fissure type before the channel.

        You must have the `manage_channels` permission to use this command.

        By default, it will show normal fissures. To show other fissure types, provide the fissure type as the
        first argument. Valid types are `normal`, `sp`, and `vs`.
        """
        if channel is None:
            channel = ctx.channel

        if fissure_type.lower() not in self.fissure_engine.ALIASES:
            await self.bot.send_message(ctx, f'Invalid fissure type: {fissure_type}')
            return

        fissure_type = self.fissure_engine.ALIASES[fissure_type.lower()]

        try:
            self.bot.database.set_fissure_list_channel(channel.guild.id, channel.id, fissure_type)
        except IntegrityError:
            self.bot.database.unset_fissure_list_channel(channel.guild.id, channel.id, fissure_type)
            await self.bot.send_message(ctx,
                                        f'The fissure list will no longer be posted/updated in {channel.mention}')
            return

        await self.bot.send_message(ctx, f'A fissure list will now be posted and then updated in {channel.mention}')

    @Cog.listener()
    async def on_ready(self):
        if not self.bot.ready:
            self.update_fissure_list.start()

            self.bot.cogs_ready.ready_up("Fissure")


async def setup(bot):
    await bot.add_cog(Fissure(bot))
